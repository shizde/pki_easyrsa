user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '"$ssl_client_s_dn" "$ssl_client_verify"';
    
    access_log /var/log/nginx/access.log main;
    
    sendfile on;
    keepalive_timeout 65;
    
    # SSL settings
    ssl_protocols TLSv1 TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Diffie Hellman parameters
    ssl_dhparam /etc/nginx/certs/dhparam.pem;

    server {
        listen 443 ssl;
        server_name pki.company.local;
        
        # SSL certificate
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        
        # CA certificate for client verification
        ssl_client_certificate /etc/nginx/certs/ca.crt;
        
        # Client certificate verification
        # "optional" allows both certificate and password auth
        ssl_verify_client optional;
        ssl_verify_depth 2;
        
        # CRL for checking revoked certificates
        ssl_crl /etc/nginx/certs/crl.pem;
        
        # Set SSL verify environment variables
        # These are passed to the Flask application
        proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
        proxy_set_header X-SSL-Client-DN $ssl_client_s_dn;
        
        location / {
            # Force SSL
            if ($scheme != "https") {
                return 301 https://$host$request_uri;
            }
            
            # Proxy to the Flask application
            proxy_pass http://app:5000;
            proxy_set_header Host $host:8443; 
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host:8443;  
            proxy_set_header X-Forwarded-Port 8443;
        
            proxy_redirect http://app:5000/ https://$host:8443/;
            proxy_redirect https://app:5000/ https://$host:8443/;
        }
    }
}
